#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        homerow: homerow {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <130>;
            flavor = "tap-preferred";
        };

        OSM_shift: OSM_shift {
            compatible = "zmk,behavior-sticky-key";
            label = "OSM_SHIFT";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <200>;
            quick-release;
        };

        hold_tab: hold_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAB";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        caps_word_custom: caps_word_custom {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_WORD_CUSTOM";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&hold_tab LEFT_SHIFT CAPSLOCK>;
        };

        homerow_RShift: homerow_RShift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_RSHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        LT_LANG_FAST: LT_LANG_FAST {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_LANG_FAST";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <130>;
            quick-tap-ms = <80>;
        };

        homerow_LShift: homerow_LShift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LSHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "tap-preferred";
            quick-tap-ms = <110>;
        };

        /* 더블탭일 때만 Sticky Shift 토글, 싱글탭은 무시 */
        // 탭: td_shift_latch, 홀드: LSHIFT  ← 한 묶음 안에 두 개!
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <23 24>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <23 9>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <23 10>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <29 30>;
        };

        Copy {
            bindings = <&kp LG(C)>;
            key-positions = <30 31>;
        };

        Past {
            bindings = <&kp LG(V)>;
            key-positions = <31 32>;
        };

        left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <8 9>;
        };

        right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <9 10>;
        };

        Question_mark {
            bindings = <&kp QUESTION>;
            key-positions = <38 39>;
        };

        Esc {
            bindings = <&kp ESCAPE>;
            key-positions = <24 25>;
            layers = <0>;
        };

        prefix+a {
            bindings = <&kp LC(A)>;
            key-positions = <14 15>;
        };

        Quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <25 26>;
        };

        Underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <37 24>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB         &kp Q             &kp W                &kp E                    &kp R                         &kp T                                 &mmv MOVE_UP                     &kp Y      &kp U                &kp I      &kp O    &kp P                                  &kp BACKSLASH
&kp LEFT_SHIFT  &homerow LCTRL A  &homerow LEFT_ALT S  &homerow LEFT_COMMAND D  &homerow_LShift LEFT_SHIFT F  &kp G                 &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp H      &kp J                &kp K      &kp L    &homerow_RShift RIGHT_SHIFT SEMICOLON  &kp SQT
&trans          &kp Z             &kp X                &kp C                    &kp V                         &kp B    &kp SPACE                    &mmv MOVE_DOWN                   &kp N      &kp M                &kp COMMA  &kp DOT  &kp FSLH                               &kp RSHIFT
                                                       &kp LGUI                 &lt 1 SPACE                   &kp TAB                                                                &kp ENTER  &LT_LANG_FAST 2 F18  &mo 3
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&kp LG(GRAVE)  &kp LG(NUMBER_1)  &kp LG(N2)  &kp LG(E)  &kp LG(NUMBER_8)  &kp LG(LS(T))                                &mmv MOVE_UP                     &trans  &trans      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans       &trans
&none          &kp LG(A)         &kp LG(S)   &kp LG(D)  &none             &kp LG(HOME)                 &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &trans  &trans      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp RG(END)  &trans
&trans         &kp LG(Z)         &none       &none      &none             &none          &kp C_MUTE                    &mmv MOVE_DOWN                   &trans  &trans      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans       &trans
                                             &trans     &trans            &trans                                                                        &trans  &caps_word  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&kp GRAVE  &kp N1           &kp N2       &kp N3    &kp N4      &kp N5                                &mmv MOVE_UP                     &kp N6     &kp N7         &kp N8         &kp N9            &kp N0        &kp PIPE
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT           &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp CARET  &kp AMPERSAND  &kp ASTERISK   &kp PLUS          &kp COLON     &kp DOUBLE_QUOTES
&none      &none            &none        &none     &none       &none        &none                    &mmv MOVE_DOWN                   &none      &none          &kp LESS_THAN  &kp GREATER_THAN  &kp QUESTION  &none
                                         &none     &caps_word  &none                                                                  &none      &none          &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans          &trans        &trans        &trans        &trans        &trans                          &trans          &trans  &trans        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp BACKSPACE
&trans          &trans        &trans        &trans        &trans        &trans                  &trans  &trans  &trans  &trans  &trans        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS
&bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans            &trans          &trans  &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS
                                            &trans        &trans        &trans                                          &trans  &trans        &trans
            >;
        };
    };
};
